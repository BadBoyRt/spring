<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!-- 
		配置一个 bean 
		class:bean的全类名，通过反射的方式在IOC容器中创建Bean，要求Bean中必须有无参构造器!!!!
		id:标识容器中的bean，id必须唯一。
	-->
	<bean id="helloWorld" class="spring.beans.HelloWord">
		<!-- 
			依赖注入：通过Setter方法进行注入
			为属性赋值  注意name2是setter方法的名字
		-->
		<property name="name2" value="Spring"></property>
	</bean>
	
	<!-- 
		依赖注入：通过构造方法注入Bean的属性或依赖的对象
		可以指定参数的位置和类型，以区分重载的构造器
		index:表示参数顺序
	 -->
	 <bean id="car" class="spring.beans.Car">
	 	<constructor-arg value="Audi" index="0"></constructor-arg>
	 	<constructor-arg value="9999999" type="double"></constructor-arg>
	 </bean>
	 
	 <!-- 
	 	此处两个构造器都满可以调用，本想初始化speed却初始化了price，此时用index就不好用了
	 	使用type参数类型
	 	--> 
	 <bean id="car2" class="spring.beans.Car">
	 	<constructor-arg value="BAOMA" type="java.lang.String"></constructor-arg>
	 	<constructor-arg value="150" type="int"></constructor-arg><!-- speed是int，如果想初始化price则使用double -->
	 </bean>
	 <!-- 构造器的index和type混合使用 -->
	 <bean id="car3" class="spring.beans.Car">
	 	<constructor-arg value="benchi" index="0"></constructor-arg>
	 	<constructor-arg value="100000" type="double"></constructor-arg>
	 	<constructor-arg value="150" type="int"></constructor-arg>
	 </bean>
	 
	 <!-- 
	 	属性值得注入，可以使用value直接注入类似<constructor-arg value="150" type="int">
	 	还可以使用value子节点进行注入。
	 	如果包含特殊字符，可以使用<![CDATA[ ]]>包裹起来
	  -->
	  <bean id="car4" class="spring.beans.Car">
	 	<constructor-arg index="0">
	 		<!-- 特殊字符 -->
	 		<value><![CDATA[<特殊字符^>]]></value>
	 	</constructor-arg>
	 	<constructor-arg value="100000" type="double"></constructor-arg>
	 	<constructor-arg type="int">
	 		<!-- 子节点注入 -->
	 		<value>150</value>
	 	</constructor-arg>
	 </bean>
	 
	 <!-- 人有车的依赖关系在spring中进行配置 -->
	 <bean id="person" class="spring.beans.Person">
	 	<property name="name" value="liyi"></property>
	 	<property name="age" value="18"></property>
	 	<!-- 
	 		1.property.ref属性建立bean之间的引用关系
	 		2.或者使用子节点<ref bean="car4"/>
	 		ref指向IOC容器中id为car4的Car
	 		 -->
	 	<!-- 引用的是此bean的外部的bean。car4 -->
	 	<property name="car" ref="car4"></property>
	 </bean>
	 <!-- 引用内部的bean,不能被外部引用，只能在内部使用 -->
	 <bean id="person2" class="spring.beans.Person">
	 	<property name="name" value="liyi"></property>
	 	<property name="age" value="18"></property>
	 	<!-- 内部bean -->
	 	<property name="car">
	 		<bean class="spring.beans.Car">
	 			<constructor-arg value="内部bean" index="0"></constructor-arg>
	 			<constructor-arg value="150000" type="double"></constructor-arg>
	 			<constructor-arg value="100" type="int"></constructor-arg>
	 		</bean>
	 	</property>
	 </bean>
	 
	 <!-- 为级联属性赋值 -->
	 <bean id="person3" class="spring.beans.Person">
	 	<property name="name" value="liyi"></property>
	 	<property name="age" value="18"></property>
	 	<property name="car" ref="car"></property>
	 	<!-- 
	 		注意，
	 		：使用级联属性赋值，必须有setter方法 
	 		：需要现有ref="car"，才能为级联属性赋值，否则会有异常。和struts2不同，struts2会创建一个car，然后赋值。spring不行。
	 		-->
	 	<property name="car.maxSpeed" value="9999"></property>
	 </bean>
	 
	 <!-- 配置集合属性 -->
	 <bean id="person4" class="spring.beans.Person">
	 	<property name="name" value="liyi"></property>
	 	<property name="age" value="25"></property>
	 	<property name="car" ref="car2"></property>
	 	<property name="cars">
	 		<list><!-- 使用list节点为list类型的属性赋值 -->
	 			<ref bean="car"/>
	 			<ref bean="car3"/>
	 			<ref bean="car4"/>
	 			<!-- 当然，也可以配置内部bean -->
	 			<bean class="spring.beans.Car">
		 			<constructor-arg value="内部bean" index="0"></constructor-arg>
		 			<constructor-arg value="150000" type="double"></constructor-arg>
		 			<constructor-arg value="100" type="int"></constructor-arg>
	 			</bean>
	 		</list>
	 	</property>
	 </bean>
	 
	 <!-- 配置Map属性值 -->
	 <bean id="person5" class="spring.beans.Person">
	 	<property name="name" value="mapPerson"></property>
	 	<property name="age" value="25"></property>
	 	<property name="mapCar"><!-- mapCar是setter方法的方法名 -->
	 		<map>
	 			<entry key="A" value-ref="car3"></entry>
	 			<entry key="B" value-ref="car4"></entry>
	 		</map>
	 	</property>
	 </bean>
	 
	 <!-- 配置Properties属性值 -->
	 <bean id="dataSource" class="spring.beans.DataSource">
	 	<property name="properties">
	 		<props>
	 			<prop key="user">mysql</prop>
	 			<prop key="password">root123</prop>
	 			<prop key="url">jdbc:mysql:3306/rongtao</prop>
	 			<prop key="driverClass">com.mysql.jdbc.Driver</prop>
	 		</props>
	 	</property>
	 </bean>
	 
	 <!-- 配置独立的集合bean，以供多个bean共享引用 (需要导入unit命名空间)-->
	 <util:list id="carsUtil">
	 	<ref bean="car"/>
	 	<ref bean="car3"/>
	 	<ref bean="car4"/>
	 </util:list>
	 <!-- 测试 -->
	 <bean id="person6" class="spring.beans.Person">
	 	<property name="name" value="liyi"></property>
	 	<property name="age" value="25"></property>
	 	<property name="cars" ref="carsUtil"></property><!-- ref指向 <util:list id="carsUtil">-->
	 </bean>
	 
	 <!-- 通过 P 命名空间 为bean的属性赋值(需要导入 P 命名空间)相对于传统的配置方式更加简洁-->
	 <bean id="person7" class="spring.beans.Person" 
	 	p:age="30" p:name="Test" p:cars-ref="carsUtil"></bean>
	 
</beans>
